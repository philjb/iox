-- Test Setup: OneMeasurementTwoSeries
-- SQL: EXPLAIN SELECT date_bin_gapfill(interval '10 minute', time, timestamp '1970-01-01T00:00:00Z') as minute, count(cpu.user) from cpu where time between timestamp '2000-05-05T12:00:00Z' and timestamp '2000-05-05T12:59:00Z' group by minute;
-- Results After Normalizing UUIDs
----------
| plan_type    | plan    |
----------
| logical_plan    | Projection: date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z")) AS minute, COUNT(cpu.user)    |
|    |   GapFill: groupBy=[[date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))]], aggr=[[COUNT(cpu.user)]], time_column=date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z")), stride=IntervalDayTime("600000"), range=Included(TimestampNanosecond(957528000000000000, None))..Included(TimestampNanosecond(957531540000000000, None))    |
|    |     Aggregate: groupBy=[[datebin(IntervalDayTime("600000"), cpu.time, TimestampNanosecond(0, None)) AS date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))]], aggr=[[COUNT(cpu.user)]]    |
|    |       TableScan: cpu projection=[time, user], full_filters=[cpu.time >= TimestampNanosecond(957528000000000000, None), cpu.time <= TimestampNanosecond(957531540000000000, None)]    |
| physical_plan    | ProjectionExec: expr=[date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))@0 as minute, COUNT(cpu.user)@1 as COUNT(cpu.user)]    |
|    |   GapFillExec: group_expr=[date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))@0], aggr_expr=[COUNT(cpu.user)@1], stride=600000, time_range=Included("957528000000000000")..Included("957531540000000000")    |
|    |     SortPreservingMergeExec: [date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))@0 ASC]    |
|    |       SortExec: expr=[date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))@0 ASC]    |
|    |         AggregateExec: mode=FinalPartitioned, gby=[date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))@0 as date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))], aggr=[COUNT(cpu.user)]    |
|    |           CoalesceBatchesExec: target_batch_size=8192    |
|    |             RepartitionExec: partitioning=Hash([Column { name: "date_bin_gapfill(IntervalDayTime(\"600000\"),cpu.time,Utf8(\"1970-01-01T00:00:00Z\"))", index: 0 }], 4), input_partitions=4    |
|    |               AggregateExec: mode=Partial, gby=[datebin(600000, time@0, 0) as date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))], aggr=[COUNT(cpu.user)]    |
|    |                 RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1    |
|    |                   CoalesceBatchesExec: target_batch_size=8192    |
|    |                     FilterExec: time@0 >= 957528000000000000 AND time@0 <= 957531540000000000    |
|    |                       ParquetExec: limit=None, partitions={1 group: [[1/1/1/00000000-0000-0000-0000-000000000000.parquet]]}, predicate=time@2 >= 957528000000000000 AND time@2 <= 957531540000000000, pruning_predicate=time_max@0 >= 957528000000000000 AND time_min@1 <= 957531540000000000, output_ordering=[time@0 ASC], projection=[time, user]    |
|    |    |
----------
-- SQL: SELECT date_bin_gapfill(interval '10 minute', time, timestamp '1970-01-01T00:00:00Z') as minute, count(cpu.user) from cpu where time between timestamp '2000-05-05T12:00:00Z' and timestamp '2000-05-05T12:59:00Z' group by minute;
+----------------------+-----------------+
| minute               | COUNT(cpu.user) |
+----------------------+-----------------+
| 2000-05-05T12:00:00Z |                 |
| 2000-05-05T12:10:00Z |                 |
| 2000-05-05T12:20:00Z | 1               |
| 2000-05-05T12:30:00Z | 2               |
| 2000-05-05T12:40:00Z | 1               |
| 2000-05-05T12:50:00Z |                 |
+----------------------+-----------------+
-- SQL: SELECT date_bin_gapfill(interval '10 minute', time, timestamp '1970-01-01T00:00:00Z') as minute from cpu where time between timestamp '2000-05-05T12:00:00Z' and timestamp '2000-05-05T12:59:00Z' group by minute;
+----------------------+
| minute               |
+----------------------+
| 2000-05-05T12:00:00Z |
| 2000-05-05T12:10:00Z |
| 2000-05-05T12:20:00Z |
| 2000-05-05T12:30:00Z |
| 2000-05-05T12:40:00Z |
| 2000-05-05T12:50:00Z |
+----------------------+
-- SQL: SELECT date_bin_gapfill(interval '10 minute', time, timestamp '1970-01-01T00:00:00Z') as minute, region, count(cpu.user) from cpu where time between timestamp '2000-05-05T12:00:00Z' and timestamp '2000-05-05T12:59:00Z' group by minute, region;
+----------------------+--------+-----------------+
| minute               | region | COUNT(cpu.user) |
+----------------------+--------+-----------------+
| 2000-05-05T12:00:00Z | a      |                 |
| 2000-05-05T12:10:00Z | a      |                 |
| 2000-05-05T12:20:00Z | a      | 1               |
| 2000-05-05T12:30:00Z | a      |                 |
| 2000-05-05T12:40:00Z | a      | 1               |
| 2000-05-05T12:50:00Z | a      |                 |
| 2000-05-05T12:00:00Z | b      |                 |
| 2000-05-05T12:10:00Z | b      |                 |
| 2000-05-05T12:20:00Z | b      |                 |
| 2000-05-05T12:30:00Z | b      | 2               |
| 2000-05-05T12:40:00Z | b      |                 |
| 2000-05-05T12:50:00Z | b      |                 |
+----------------------+--------+-----------------+
-- SQL: SELECT date_bin_gapfill(interval '10 minute', time, timestamp '1970-01-01T00:00:07Z') as minute, region, count(cpu.user) from cpu where time between timestamp '2000-05-05T12:00:00Z' and timestamp '2000-05-05T12:59:00Z' group by minute, region;
+----------------------+--------+-----------------+
| minute               | region | COUNT(cpu.user) |
+----------------------+--------+-----------------+
| 2000-05-05T11:50:07Z | a      |                 |
| 2000-05-05T12:00:07Z | a      |                 |
| 2000-05-05T12:10:07Z | a      | 1               |
| 2000-05-05T12:20:07Z | a      |                 |
| 2000-05-05T12:30:07Z | a      | 1               |
| 2000-05-05T12:40:07Z | a      |                 |
| 2000-05-05T12:50:07Z | a      |                 |
| 2000-05-05T11:50:07Z | b      |                 |
| 2000-05-05T12:00:07Z | b      |                 |
| 2000-05-05T12:10:07Z | b      |                 |
| 2000-05-05T12:20:07Z | b      |                 |
| 2000-05-05T12:30:07Z | b      | 2               |
| 2000-05-05T12:40:07Z | b      |                 |
| 2000-05-05T12:50:07Z | b      |                 |
+----------------------+--------+-----------------+
-- SQL: EXPLAIN SELECT region, date_bin_gapfill(interval '10 minute', time, timestamp '1970-01-01T00:00:00Z') as minute, locf(avg(cpu.user)) from cpu where time between timestamp '2000-05-05T12:00:00Z' and timestamp '2000-05-05T12:59:00Z' group by region, minute;
-- Results After Normalizing UUIDs
----------
| plan_type    | plan    |
----------
| logical_plan    | Projection: cpu.region, date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z")) AS minute, AVG(cpu.user)    |
|    |   GapFill: groupBy=[[cpu.region, date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))]], aggr=[[LOCF(AVG(cpu.user))]], time_column=date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z")), stride=IntervalDayTime("600000"), range=Included(TimestampNanosecond(957528000000000000, None))..Included(TimestampNanosecond(957531540000000000, None))    |
|    |     Aggregate: groupBy=[[cpu.region, datebin(IntervalDayTime("600000"), cpu.time, TimestampNanosecond(0, None)) AS date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))]], aggr=[[AVG(cpu.user)]]    |
|    |       TableScan: cpu projection=[region, time, user], full_filters=[cpu.time >= TimestampNanosecond(957528000000000000, None), cpu.time <= TimestampNanosecond(957531540000000000, None)]    |
| physical_plan    | ProjectionExec: expr=[region@0 as region, date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))@1 as minute, AVG(cpu.user)@2 as AVG(cpu.user)]    |
|    |   GapFillExec: group_expr=[region@0, date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))@1], aggr_expr=[LOCF(AVG(cpu.user)@2)], stride=600000, time_range=Included("957528000000000000")..Included("957531540000000000")    |
|    |     SortPreservingMergeExec: [region@0 ASC,date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))@1 ASC]    |
|    |       SortExec: expr=[region@0 ASC,date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))@1 ASC]    |
|    |         AggregateExec: mode=FinalPartitioned, gby=[region@0 as region, date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))@1 as date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))], aggr=[AVG(cpu.user)]    |
|    |           CoalesceBatchesExec: target_batch_size=8192    |
|    |             RepartitionExec: partitioning=Hash([Column { name: "region", index: 0 }, Column { name: "date_bin_gapfill(IntervalDayTime(\"600000\"),cpu.time,Utf8(\"1970-01-01T00:00:00Z\"))", index: 1 }], 4), input_partitions=4    |
|    |               AggregateExec: mode=Partial, gby=[region@0 as region, datebin(600000, time@1, 0) as date_bin_gapfill(IntervalDayTime("600000"),cpu.time,Utf8("1970-01-01T00:00:00Z"))], aggr=[AVG(cpu.user)]    |
|    |                 RepartitionExec: partitioning=RoundRobinBatch(4), input_partitions=1    |
|    |                   CoalesceBatchesExec: target_batch_size=8192    |
|    |                     FilterExec: time@1 >= 957528000000000000 AND time@1 <= 957531540000000000    |
|    |                       ParquetExec: limit=None, partitions={1 group: [[1/1/1/00000000-0000-0000-0000-000000000000.parquet]]}, predicate=time@2 >= 957528000000000000 AND time@2 <= 957531540000000000, pruning_predicate=time_max@0 >= 957528000000000000 AND time_min@1 <= 957531540000000000, output_ordering=[region@0 ASC, time@1 ASC], projection=[region, time, user]    |
|    |    |
----------
-- SQL: SELECT region, date_bin_gapfill(interval '5 minute', time, timestamp '1970-01-01T00:00:00Z') as minute, locf(min(cpu.user)) from cpu where time between timestamp '2000-05-05T12:15:00Z' and timestamp '2000-05-05T12:59:00Z' group by region, minute;
+--------+----------------------+---------------+
| region | minute               | MIN(cpu.user) |
+--------+----------------------+---------------+
| a      | 2000-05-05T12:15:00Z |               |
| a      | 2000-05-05T12:20:00Z | 23.2          |
| a      | 2000-05-05T12:25:00Z | 23.2          |
| a      | 2000-05-05T12:30:00Z | 23.2          |
| a      | 2000-05-05T12:35:00Z | 23.2          |
| a      | 2000-05-05T12:40:00Z | 21.0          |
| a      | 2000-05-05T12:45:00Z | 21.0          |
| a      | 2000-05-05T12:50:00Z | 21.0          |
| a      | 2000-05-05T12:55:00Z | 21.0          |
| b      | 2000-05-05T12:15:00Z |               |
| b      | 2000-05-05T12:20:00Z |               |
| b      | 2000-05-05T12:25:00Z |               |
| b      | 2000-05-05T12:30:00Z | 25.2          |
| b      | 2000-05-05T12:35:00Z | 28.9          |
| b      | 2000-05-05T12:40:00Z | 28.9          |
| b      | 2000-05-05T12:45:00Z | 28.9          |
| b      | 2000-05-05T12:50:00Z | 28.9          |
| b      | 2000-05-05T12:55:00Z | 28.9          |
+--------+----------------------+---------------+
-- SQL: SELECT date_bin_gapfill(interval '1 minute', time, timestamp '1970-01-01T00:00:00Z') as minute, locf(min(cpu.idle)) from cpu where time between timestamp '2000-05-05T12:19:00Z' and timestamp '2000-05-05T12:40:00Z' group by minute;
+----------------------+---------------+
| minute               | MIN(cpu.idle) |
+----------------------+---------------+
| 2000-05-05T12:19:00Z |               |
| 2000-05-05T12:20:00Z | 70.0          |
| 2000-05-05T12:21:00Z | 70.0          |
| 2000-05-05T12:22:00Z | 70.0          |
| 2000-05-05T12:23:00Z | 70.0          |
| 2000-05-05T12:24:00Z | 70.0          |
| 2000-05-05T12:25:00Z | 70.0          |
| 2000-05-05T12:26:00Z | 70.0          |
| 2000-05-05T12:27:00Z | 70.0          |
| 2000-05-05T12:28:00Z | 70.0          |
| 2000-05-05T12:29:00Z | 70.0          |
| 2000-05-05T12:30:00Z | 70.0          |
| 2000-05-05T12:31:00Z | 70.0          |
| 2000-05-05T12:32:00Z | 70.0          |
| 2000-05-05T12:33:00Z | 70.0          |
| 2000-05-05T12:34:00Z | 70.0          |
| 2000-05-05T12:35:00Z | 70.0          |
| 2000-05-05T12:36:00Z | 70.0          |
| 2000-05-05T12:37:00Z | 70.0          |
| 2000-05-05T12:38:00Z | 70.0          |
| 2000-05-05T12:39:00Z | 60.0          |
| 2000-05-05T12:40:00Z | 60.0          |
+----------------------+---------------+